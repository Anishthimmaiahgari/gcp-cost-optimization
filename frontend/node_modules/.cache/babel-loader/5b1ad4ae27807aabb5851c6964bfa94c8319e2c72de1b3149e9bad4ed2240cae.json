{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\nimport CloudService from '../services/CloudService'; // Add this import\n\nfunction Dashboard() {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [notification, setNotification] = useState(null);\n  const [cloudProviders, setCloudProviders] = useState({\n    aws: false,\n    gcp: false,\n    azure: false\n  });\n  useEffect(() => {\n    // Check for messages from redirects\n    if (location.state && location.state.message) {\n      setNotification({\n        message: location.state.message,\n        type: 'success'\n      });\n\n      // Clear the location state after reading\n      window.history.replaceState({}, document.title);\n    }\n\n    // Check cloud providers authentication status\n    setCloudProviders({\n      aws: localStorage.getItem('aws_authenticated') === 'true',\n      gcp: CloudService.isGCPAuthenticated(),\n      azure: localStorage.getItem('azure_authenticated') === 'true'\n    });\n  }, [location]);\n  const handleSignOut = () => {\n    // Clear all authentication data\n    AuthService.logout();\n    CloudService.clearGCPAuth();\n    localStorage.removeItem('aws_authenticated');\n    localStorage.removeItem('azure_authenticated');\n    navigate('/signin');\n  };\n\n  // Add the rest of your existing Dashboard code...\n\n  // In your GCP card, you can show a connected status:\n  // <div className=\"mt-2 text-sm\">\n  //   {cloudProviders.gcp ? (\n  //     <span className=\"text-green-400\">✓ Connected to {CloudService.getGCPProjectId()}</span>\n  //   ) : (\n  //     <span className=\"text-gray-400\">Not connected</span>\n  //   )}\n  // </div>\n}\n_s(Dashboard, \"TOFYi1ZpLzzOXrVxLe5EqDfI0a4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","AuthService","CloudService","Dashboard","_s","navigate","location","notification","setNotification","cloudProviders","setCloudProviders","aws","gcp","azure","state","message","type","window","history","replaceState","document","title","localStorage","getItem","isGCPAuthenticated","handleSignOut","logout","clearGCPAuth","removeItem","_c","$RefreshReg$"],"sources":["C:/Users/acer/Downloads/cloud-auth-dashboard/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport AuthService from '../services/AuthService';\r\nimport CloudService from '../services/CloudService'; // Add this import\r\n\r\nfunction Dashboard() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [notification, setNotification] = useState(null);\r\n  const [cloudProviders, setCloudProviders] = useState({\r\n    aws: false,\r\n    gcp: false,\r\n    azure: false\r\n  });\r\n  \r\n  useEffect(() => {\r\n    // Check for messages from redirects\r\n    if (location.state && location.state.message) {\r\n      setNotification({\r\n        message: location.state.message,\r\n        type: 'success'\r\n      });\r\n      \r\n      // Clear the location state after reading\r\n      window.history.replaceState({}, document.title);\r\n    }\r\n    \r\n    // Check cloud providers authentication status\r\n    setCloudProviders({\r\n      aws: localStorage.getItem('aws_authenticated') === 'true',\r\n      gcp: CloudService.isGCPAuthenticated(),\r\n      azure: localStorage.getItem('azure_authenticated') === 'true'\r\n    });\r\n  }, [location]);\r\n  \r\n  const handleSignOut = () => {\r\n    // Clear all authentication data\r\n    AuthService.logout();\r\n    CloudService.clearGCPAuth();\r\n    localStorage.removeItem('aws_authenticated');\r\n    localStorage.removeItem('azure_authenticated');\r\n    \r\n    navigate('/signin');\r\n  };\r\n\r\n  // Add the rest of your existing Dashboard code...\r\n  \r\n  // In your GCP card, you can show a connected status:\r\n  // <div className=\"mt-2 text-sm\">\r\n  //   {cloudProviders.gcp ? (\r\n  //     <span className=\"text-green-400\">✓ Connected to {CloudService.getGCPProjectId()}</span>\r\n  //   ) : (\r\n  //     <span className=\"text-gray-400\">Not connected</span>\r\n  //   )}\r\n  // </div>\r\n}\r\n\r\nexport default Dashboard;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,YAAY,MAAM,0BAA0B,CAAC,CAAC;;AAErD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC;IACnDa,GAAG,EAAE,KAAK;IACVC,GAAG,EAAE,KAAK;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFhB,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,QAAQ,CAACQ,KAAK,IAAIR,QAAQ,CAACQ,KAAK,CAACC,OAAO,EAAE;MAC5CP,eAAe,CAAC;QACdO,OAAO,EAAET,QAAQ,CAACQ,KAAK,CAACC,OAAO;QAC/BC,IAAI,EAAE;MACR,CAAC,CAAC;;MAEF;MACAC,MAAM,CAACC,OAAO,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAACC,KAAK,CAAC;IACjD;;IAEA;IACAX,iBAAiB,CAAC;MAChBC,GAAG,EAAEW,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM;MACzDX,GAAG,EAAEV,YAAY,CAACsB,kBAAkB,CAAC,CAAC;MACtCX,KAAK,EAAES,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,KAAK;IACzD,CAAC,CAAC;EACJ,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;EAEd,MAAMmB,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACAxB,WAAW,CAACyB,MAAM,CAAC,CAAC;IACpBxB,YAAY,CAACyB,YAAY,CAAC,CAAC;IAC3BL,YAAY,CAACM,UAAU,CAAC,mBAAmB,CAAC;IAC5CN,YAAY,CAACM,UAAU,CAAC,qBAAqB,CAAC;IAE9CvB,QAAQ,CAAC,SAAS,CAAC;EACrB,CAAC;;EAED;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACD,EAAA,CAlDQD,SAAS;EAAA,QACCJ,WAAW,EACXC,WAAW;AAAA;AAAA6B,EAAA,GAFrB1B,SAAS;AAoDlB,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}