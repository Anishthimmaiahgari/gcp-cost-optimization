{"ast":null,"code":"/**\r\n * Service for cloud provider authentication and operations\r\n */\nclass CloudService {\n  constructor() {\n    this.apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n  }\n\n  /**\r\n   * Authenticate with GCP using a credentials JSON file\r\n   * @param {File} file - The GCP credentials JSON file\r\n   * @returns {Promise} - The authentication result\r\n   */\n  async authenticateGCP(file) {\n    const formData = new FormData();\n    formData.append('credential_file', file);\n    const response = await fetch(`${this.apiBaseUrl}/authenticate/gcp`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to authenticate with GCP');\n    }\n    return response.json();\n  }\n\n  /**\r\n   * Get GCP resources for the authenticated project\r\n   * @param {string} projectId - The GCP project ID\r\n   * @returns {Promise} - The GCP resources\r\n   */\n  async getGCPResources(projectId) {\n    const response = await fetch(`${this.apiBaseUrl}/gcp/resources?project_id=${projectId}`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch GCP resources');\n    }\n    return response.json();\n  }\n\n  /**\r\n   * Check if the user is authenticated with GCP\r\n   * @returns {boolean} - Whether the user is authenticated\r\n   */\n  isGCPAuthenticated() {\n    return localStorage.getItem('gcp_authenticated') === 'true';\n  }\n\n  /**\r\n   * Get the authenticated GCP project ID\r\n   * @returns {string|null} - The project ID or null if not authenticated\r\n   */\n  getGCPProjectId() {\n    return localStorage.getItem('gcp_project_id');\n  }\n\n  /**\r\n   * Clear GCP authentication data\r\n   */\n  clearGCPAuth() {\n    localStorage.removeItem('gcp_authenticated');\n    localStorage.removeItem('gcp_project_id');\n  }\n}\nexport default new CloudService();","map":{"version":3,"names":["CloudService","constructor","apiBaseUrl","process","env","REACT_APP_API_URL","authenticateGCP","file","formData","FormData","append","response","fetch","method","body","ok","errorData","json","Error","error","getGCPResources","projectId","isGCPAuthenticated","localStorage","getItem","getGCPProjectId","clearGCPAuth","removeItem"],"sources":["C:/Users/acer/Downloads/cloud-auth-dashboard/frontend/src/services/CloudService.js"],"sourcesContent":["/**\r\n * Service for cloud provider authentication and operations\r\n */\r\nclass CloudService {\r\n    constructor() {\r\n      this.apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n    }\r\n  \r\n    /**\r\n     * Authenticate with GCP using a credentials JSON file\r\n     * @param {File} file - The GCP credentials JSON file\r\n     * @returns {Promise} - The authentication result\r\n     */\r\n    async authenticateGCP(file) {\r\n      const formData = new FormData();\r\n      formData.append('credential_file', file);\r\n  \r\n      const response = await fetch(`${this.apiBaseUrl}/authenticate/gcp`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to authenticate with GCP');\r\n      }\r\n  \r\n      return response.json();\r\n    }\r\n  \r\n    /**\r\n     * Get GCP resources for the authenticated project\r\n     * @param {string} projectId - The GCP project ID\r\n     * @returns {Promise} - The GCP resources\r\n     */\r\n    async getGCPResources(projectId) {\r\n      const response = await fetch(`${this.apiBaseUrl}/gcp/resources?project_id=${projectId}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch GCP resources');\r\n      }\r\n  \r\n      return response.json();\r\n    }\r\n  \r\n    /**\r\n     * Check if the user is authenticated with GCP\r\n     * @returns {boolean} - Whether the user is authenticated\r\n     */\r\n    isGCPAuthenticated() {\r\n      return localStorage.getItem('gcp_authenticated') === 'true';\r\n    }\r\n  \r\n    /**\r\n     * Get the authenticated GCP project ID\r\n     * @returns {string|null} - The project ID or null if not authenticated\r\n     */\r\n    getGCPProjectId() {\r\n      return localStorage.getItem('gcp_project_id');\r\n    }\r\n  \r\n    /**\r\n     * Clear GCP authentication data\r\n     */\r\n    clearGCPAuth() {\r\n      localStorage.removeItem('gcp_authenticated');\r\n      localStorage.removeItem('gcp_project_id');\r\n    }\r\n  }\r\n  \r\n  export default new CloudService();"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EAChF;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAMC,eAAeA,CAACC,IAAI,EAAE;IAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAEH,IAAI,CAAC;IAExC,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACV,UAAU,mBAAmB,EAAE;MAClEW,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,iCAAiC,CAAC;IACvE;IAEA,OAAOR,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;;EAEA;AACJ;AACA;AACA;AACA;EACI,MAAMG,eAAeA,CAACC,SAAS,EAAE;IAC/B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACV,UAAU,6BAA6BmB,SAAS,EAAE,CAAC;IAExF,IAAI,CAACV,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,+BAA+B,CAAC;IACrE;IAEA,OAAOR,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;;EAEA;AACJ;AACA;AACA;EACIK,kBAAkBA,CAAA,EAAG;IACnB,OAAOC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM;EAC7D;;EAEA;AACJ;AACA;AACA;EACIC,eAAeA,CAAA,EAAG;IAChB,OAAOF,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;EAC/C;;EAEA;AACJ;AACA;EACIE,YAAYA,CAAA,EAAG;IACbH,YAAY,CAACI,UAAU,CAAC,mBAAmB,CAAC;IAC5CJ,YAAY,CAACI,UAAU,CAAC,gBAAgB,CAAC;EAC3C;AACF;AAEA,eAAe,IAAI3B,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}